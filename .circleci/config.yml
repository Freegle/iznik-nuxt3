version: 2.1

orbs:
  node: circleci/node@5.1.0
  browser-tools: circleci/browser-tools@1.4.1

# Define reusable commands
commands:
  save-test-results:
    description: "Save test results and artifacts (always runs)"
    steps:
      - run:
          name: Ensure test directories exist
          command: |
            mkdir -p test-results
            mkdir -p playwright-report
            mkdir -p screenshots
            mkdir -p playwright-screenshots
          when: always
      - store_test_results:
          path: test-results
          when: always
      - store_artifacts:
          path: test-results
          destination: test-results
          when: always
      - store_artifacts:
          path: playwright-report
          destination: playwright-report
          when: always
      # Store our dedicated screenshots directory
      - store_artifacts:
          path: playwright-screenshots
          destination: playwright-screenshots
          when: always
      # Also look for any other screenshots that might have been created
      - run:
          name: Find and store additional screenshots
          command: |
            mkdir -p screenshots
            # Copy root level screenshots
            find . -maxdepth 1 -name "*.png" -exec cp {} screenshots/ \; || true
            # Also try to find screenshots in test-results
            find test-results -name "*.png" -exec cp {} screenshots/ \; || true
          when: always
      - store_artifacts:
          path: screenshots
          destination: screenshots
          when: always

# Define the jobs we want to run
jobs:
  build-and-test:
    docker:
      - image: cimg/node:18.20.8-browsers
        environment:
          NODE_ENV: test
          TEST_EMAIL_DOMAIN: ${TEST_EMAIL_DOMAIN:-yahoogroups.com}
          STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY:-pk_test_51PrK1sP3oIVajsTk17Glxy8dnVLj3vRejiOFurMWO6lrV3VFzHS1Cg908Ker2mux5TD7Tym9WLYA7dHBNcEh0Y3C00SK9swPtJ}
    # Use a larger resource class with more CPU/RAM - otherwise build fails.
    resource_class: large

    steps:
      - checkout

      # Install dependencies
      - run:
          name: Optimize Node.js environment
          command: |
            # Set Node.js memory options
            echo "export NODE_OPTIONS=\"--max-old-space-size=8192\"" >> $BASH_ENV
            source $BASH_ENV
            
      # Install dependencies with optimized settings
      - node/install-packages:
          pkg-manager: npm
          cache-path: ~/project/node_modules
          override-ci-command: npm ci --prefer-offline --no-audit

      # Install Playwright browsers and system dependencies
      - run:
          name: Install Playwright browsers
          command: npx playwright install --with-deps chromium

      # Build the project with environment variables
      - run:
          name: Build for testing
          command: |
            export IZNIK_API_V1=${API_V1_URL:-https://fdapilive.ilovefreegle.org/api}
            export IZNIK_API_V2=${API_V2_URL:-https://api.ilovefreegle.org/apiv2}
            export STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY:-pk_test_51PrK1sP3oIVajsTk17Glxy8dnVLj3vRejiOFurMWO6lrV3VFzHS1Cg908Ker2mux5TD7Tym9WLYA7dHBNcEh0Y3C00SK9swPtJ}
            # Increase Node.js memory limit to 8GB
            export NODE_OPTIONS="--max-old-space-size=8192"
            npm run build

      # Serve the built application in the background
      - run:
          name: Serve built application
          command: |
            export NODE_OPTIONS="--max-old-space-size=8192"
            npm run start
          background: true

      # Wait for the server to be responsive
      - run:
          name: Wait for server to be ready
          command: |
            # Extract the host and port from TEST_BASE_URL or use default
            SERVER_URL=${TEST_URL:-http://localhost:3000}
            
            # Wait for server to be up - using longer timeout (120 seconds)
            timeout=${SERVER_TIMEOUT:-120}
            counter=0
            until curl --output /dev/null --silent --head --fail $SERVER_URL; do
              if [ $counter -ge $timeout ]; then
                echo "Timed out waiting for server to start at $SERVER_URL"
                exit 1
              fi
              counter=$((counter+1))
              echo "Waiting for server to be ready at $SERVER_URL... ($counter/$timeout)"
              sleep 1
            done
            echo "Server is up!"

      # Monitor memory usage during build
      - run:
          name: Start memory monitor
          background: true
          command: |
            while true; do
              echo "Memory usage at $(date):"
              free -h
              echo "Node process memory:"
              ps -o pid,vsz,rss,pmem,pcpu,cmd -e | grep node | grep -v grep
              sleep 30
            done
            
      # Run Playwright tests
      - run:
          name: Run Playwright tests
          command: |
            mkdir -p test-results
            export NODE_OPTIONS="--max-old-space-size=8192"
            
            # Run tests and capture exit code
            npm run test:ci
            TEST_EXIT_CODE=$?
            
            echo "Playwright test exit code: $TEST_EXIT_CODE"
            
            # Check for test results
            if [ ! -f "test-results/junit.xml" ]; then
              echo "Test results not found at expected location: test-results/junit.xml"
              echo "This likely indicates a failure in the test framework itself."
              exit 1
            fi
            
            # Print summary of test failures from junit report if tests failed
            if [ $TEST_EXIT_CODE -ne 0 ]; then
              echo "==== TEST FAILURES SUMMARY ===="
              if command -v xmllint > /dev/null; then
                # Get count of failing tests
                FAILURE_COUNT=$(xmllint --xpath "count(//testcase[failure])" test-results/junit.xml || echo "unknown")
                echo "Found $FAILURE_COUNT failing tests"
                
                # Extract specific failures
                xmllint --xpath "//testcase[failure]/@name" test-results/junit.xml 2>/dev/null || echo "Could not extract failure details"
              else
                # Fallback if xmllint is not available
                grep -A 2 "<failure" test-results/junit.xml || echo "No failure details found"
              fi
              echo "==== END OF FAILURES SUMMARY ===="
              
              echo "See CircleCI artifacts for full test reports and screenshots"
              # Exit with the original test exit code to properly fail the build
              exit $TEST_EXIT_CODE
            fi
                
      # Save test results (always run this, even if tests fail)
      - run:
          name: Collect test artifacts
          command: |
            mkdir -p playwright-screenshots
            # Ensure we have full screenshot info for debugging
            find . -name "*.png" -type f -not -path "./node_modules/*" -exec cp {} playwright-screenshots/ \; || true
          when: always  # Make sure this runs even if tests fail
      
      # Save all test results and artifacts
      - save-test-results  # This custom command includes 'when: always' for all its steps

# Orchestrate the workflow
workflows:
  version: 2
  build-test:
    jobs:
      # Run tests on all branches
      - build-and-test