version: 2.1

orbs:
  android: circleci/android@2.3.0

executors:
  android-executor:
    docker:
      - image: cimg/android:2025.10-node
    resource_class: large

commands:
  setup-android-fastlane:
    steps:
      - run:
          name: Install Ruby and Bundler
          command: |
            sudo apt-get update
            sudo apt-get install -y ruby-full
            sudo gem install bundler
      - run:
          name: Install Fastlane
          command: |
            bundle config set --local path 'vendor/bundle'
            # Update Fastlane to latest version
            bundle update fastlane
            bundle install
      - run:
          name: Decode Google Play JSON Key
          command: |
            echo "üîê Decoding Google Play JSON Key..."

            # Check if environment variable is set
            if [ -z "$GOOGLE_PLAY_JSON_KEY" ]; then
              echo "‚ùå CRITICAL: GOOGLE_PLAY_JSON_KEY environment variable is not set"
              exit 1
            fi

            # Decode the key
            echo $GOOGLE_PLAY_JSON_KEY | base64 -d > fastlane/google-play-api-key.json

            # Validate the file was created
            if [ ! -f fastlane/google-play-api-key.json ]; then
              echo "‚ùå CRITICAL: Failed to create google-play-api-key.json"
              exit 1
            fi

            # Check file size
            FILE_SIZE=$(wc -c < fastlane/google-play-api-key.json)
            echo "‚úÖ File created: $FILE_SIZE bytes"

            if [ "$FILE_SIZE" -eq 0 ]; then
              echo "‚ùå CRITICAL: google-play-api-key.json is empty"
              exit 1
            fi

            # Validate JSON syntax
            if python3 -m json.tool fastlane/google-play-api-key.json > /dev/null 2>&1; then
              echo "‚úÖ Valid JSON structure"
              # Show project email (not sensitive, useful for debugging)
              echo "üìß Service Account: $(python3 -c "import json; print(json.load(open('fastlane/google-play-api-key.json'))['client_email'])")"
            else
              echo "‚ùå CRITICAL: Invalid JSON - Google Play API will not work!"
              exit 1
            fi

            echo "‚úÖ Google Play JSON Key validated successfully"

jobs:
  build-android:
    executor: android-executor
    steps:
      - checkout

      # Verify Node.js version
      - run:
          name: Verify Node.js and npm versions
          command: |
            node --version
            npm --version

      # Restore npm cache
      - restore_cache:
          keys:
            - npm-deps-v1-{{ checksum "package-lock.json" }}
            - npm-deps-v1-

      # Install Node.js dependencies
      - run:
          name: Install Node.js Dependencies
          command: npm ci

      - save_cache:
          key: npm-deps-v1-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

      # Build Nuxt app for production
      - run:
          name: Build Nuxt App
          command: |
            export ISAPP=true
            export APP_ENV=production
            # Set Sentry DSN from app-specific environment variable
            if [ -n "$SENTRY_DSN_APP_FD" ]; then
              export SENTRY_DSN="$SENTRY_DSN_APP_FD"
              echo "‚úÖ Using app-specific Sentry DSN for error tracking"
            else
              echo "‚ö†Ô∏è  SENTRY_DSN_APP_FD not set - app will use default Sentry DSN"
            fi
            npm run generate

      # Decode and place google-services.json for Firebase
      - run:
          name: Setup Firebase Configuration
          command: |
            if [ -n "$GOOGLE_SERVICES_JSON_BASE64" ]; then
              echo "Decoding google-services.json from environment variable"
              echo "$GOOGLE_SERVICES_JSON_BASE64" | base64 -d > android/app/google-services.json

              # Validate the decoded file
              if [ -f android/app/google-services.json ]; then
                FILE_SIZE=$(wc -c < android/app/google-services.json)
                echo "‚úÖ File created: $FILE_SIZE bytes"

                # Validate JSON syntax
                if python3 -m json.tool android/app/google-services.json > /dev/null 2>&1; then
                  echo "‚úÖ Valid JSON structure"
                  # Show project info (not sensitive)
                  echo "üì± Project ID: $(python3 -c "import json; print(json.load(open('android/app/google-services.json'))['project_info']['project_id'])")"
                else
                  echo "‚ùå ERROR: Invalid JSON - Firebase will not work!"
                  exit 1
                fi
              else
                echo "‚ùå ERROR: File was not created!"
                exit 1
              fi
            else
              echo "‚ö†Ô∏è  GOOGLE_SERVICES_JSON_BASE64 not set - Push notifications will not work"
              echo "   Add this environment variable in CircleCI project settings"
            fi

      # Sync Capacitor
      - run:
          name: Sync Capacitor to Android
          command: npx cap sync android

      # Make gradlew executable
      - run:
          name: Make gradlew executable
          command: chmod +x android/gradlew

      # Restore Fastlane bundle cache
      - restore_cache:
          keys:
            - bundle-v1-{{ checksum "Gemfile.lock" }}
            - bundle-v1-

      # Setup Fastlane
      - setup-android-fastlane

      - save_cache:
          key: bundle-v1-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      # Build and Deploy to Internal Track
      - run:
          name: Build and Deploy to Google Play Internal Track
          command: |
            # Run fastlane and capture the new version
            bundle exec fastlane android internal

            # The NEW_VERSION is set by Fastlane in the environment
            # We'll update CircleCI env var in the next step

      # Update CircleCI CURRENT_VERSION environment variable
      - run:
          name: Update CircleCI Version Variable
          command: |
            # Read the new version written by Fastlane
            if [ ! -f .new_version ]; then
              echo "‚ö†Ô∏è  .new_version file not found - skipping version update"
              exit 0
            fi

            NEW_VERSION=$(cat .new_version)
            echo "üìù Updating CircleCI CURRENT_VERSION to: ${NEW_VERSION}"

            # Update environment variable via CircleCI API
            # First delete the old one
            curl -X DELETE \
              -H "Circle-Token: ${CIRCLECI_API_TOKEN}" \
              "https://circleci.com/api/v2/project/gh/Freegle/iznik-nuxt3/envvar/CURRENT_VERSION"

            # Then create new one with updated value
            curl -X POST \
              -H "Circle-Token: ${CIRCLECI_API_TOKEN}" \
              -H "Content-Type: application/json" \
              -d "{\"name\":\"CURRENT_VERSION\",\"value\":\"${NEW_VERSION}\"}" \
              "https://circleci.com/api/v2/project/gh/Freegle/iznik-nuxt3/envvar"

            echo "‚úÖ Updated CURRENT_VERSION to ${NEW_VERSION}"

      # Send email notification for beta release
      - run:
          name: Send Beta Release Notification
          when: on_success
          command: |
            NEW_VERSION=$(cat .new_version 2>/dev/null || echo "Unknown")

            # Send email using curl and a mail service
            # Requires NOTIFICATION_EMAIL environment variable to be set
            if [ -n "$NOTIFICATION_EMAIL" ]; then
              echo "üìß Sending beta release notification to ${NOTIFICATION_EMAIL}"

              # Create simple email body using echo to avoid YAML parsing issues
              {
                echo "Subject: üöÄ New Freegle Beta Release: ${NEW_VERSION}"
                echo ""
                echo "Freegle Android App - Beta Release Deployed"
                echo ""
                echo "Version: ${NEW_VERSION}"
                echo "Build: #${CIRCLE_BUILD_NUM}"
                echo "Branch: ${CIRCLE_BRANCH}"
                echo "Commit: ${CIRCLE_SHA1:0:8}"
                echo ""
                echo "The new beta version has been uploaded to Google Play Open Testing track."
                echo ""
                echo "üì± Release Notes: \"Version ${NEW_VERSION} - Bug fixes and improvements\""
                echo ""
                echo "üîó View in Play Console:"
                echo "https://play.google.com/console/u/0/developers/5213085306367696468/app/4972100654921386219/tracks/open-testing"
                echo ""
                echo "üîó CircleCI Build:"
                echo "${CIRCLE_BUILD_URL}"
                echo ""
                echo "This release will be automatically promoted to production at midnight UTC if no issues are found."
                echo ""
                echo "ü§ñ Automated notification from CircleCI"
              } > /tmp/email_body.txt

              # You can integrate with your preferred email service here
              # For now, just log the notification
              echo "‚úÖ Beta release notification prepared (set up email integration)"
              cat /tmp/email_body.txt
            else
              echo "‚ÑπÔ∏è  NOTIFICATION_EMAIL not set - skipping email notification"
            fi

      # Store build artifacts
      - store_artifacts:
          path: android/app/build/outputs/bundle/release/
          destination: android-bundle
      - store_artifacts:
          path: android/app/build/outputs/apk/release/
          destination: android-apk

      # Store debug artifacts
      - run:
          name: Create build info file
          command: |
            echo "Build #${CIRCLE_BUILD_NUM}" > build-info.txt
            echo "Branch: ${CIRCLE_BRANCH}" >> build-info.txt
            echo "Commit: ${CIRCLE_SHA1}" >> build-info.txt
            echo "" >> build-info.txt
            echo "google-services.json status:" >> build-info.txt
            ls -la android/app/google-services.json >> build-info.txt 2>&1 || echo "  File not found" >> build-info.txt
            echo "" >> build-info.txt
            echo "Build outputs:" >> build-info.txt
            ls -lh android/app/build/outputs/bundle/release/ >> build-info.txt 2>&1 || echo "  Bundle not found" >> build-info.txt
            ls -lh android/app/build/outputs/apk/release/ >> build-info.txt 2>&1 || echo "  APK not found" >> build-info.txt
          when: always
      - store_artifacts:
          path: build-info.txt
          destination: build-info.txt
      - store_artifacts:
          path: android/app/build/reports/
          destination: gradle-reports
          when: always

  auto-promote-production:
    executor: android-executor
    steps:
      - checkout

      # Restore Fastlane bundle cache
      - restore_cache:
          keys:
            - bundle-v1-{{ checksum "Gemfile.lock" }}
            - bundle-v1-

      # Setup Fastlane
      - setup-android-fastlane

      # Check and auto-promote beta to production after 24 hours
      - run:
          name: Auto-promote Beta to Production
          command: |
            bundle exec fastlane android auto_promote
            # Store result for notification
            echo $? > /tmp/promote_status

      # Send email notification for production release
      - run:
          name: Send Production Release Notification
          when: on_success
          command: |
            # Check if promotion actually occurred (fastlane would have logged this)
            if [ -f /tmp/promote_status ] && [ "$(cat /tmp/promote_status)" = "0" ]; then
              VERSION=$(cat .new_version 2>/dev/null || echo "$CURRENT_VERSION")

              if [ -n "$NOTIFICATION_EMAIL" ]; then
                echo "üìß Sending production release notification to ${NOTIFICATION_EMAIL}"

                # Create email body using echo to avoid YAML parsing issues
                {
                  echo "Subject: ‚úÖ Freegle Production Release: ${VERSION}"
                  echo ""
                  echo "Freegle Android App - Production Release Deployed"
                  echo ""
                  echo "Version: ${VERSION}"
                  echo "Build: Auto-promoted from Beta"
                  echo "Branch: ${CIRCLE_BRANCH}"
                  echo ""
                  echo "The beta version has been automatically promoted to production after 24 hours in open testing."
                  echo ""
                  echo "üì± Release Notes: \"Version ${VERSION} - Bug fixes and improvements\""
                  echo ""
                  echo "üîó View in Play Console:"
                  echo "https://play.google.com/console/u/0/developers/5213085306367696468/app/4972100654921386219/tracks/production"
                  echo ""
                  echo "üîó CircleCI Workflow:"
                  echo "${CIRCLE_BUILD_URL}"
                  echo ""
                  echo "Users on Google Play will receive this update automatically."
                  echo ""
                  echo "ü§ñ Automated notification from CircleCI"
                } > /tmp/email_body.txt

                echo "‚úÖ Production release notification prepared (set up email integration)"
                cat /tmp/email_body.txt
              else
                echo "‚ÑπÔ∏è  NOTIFICATION_EMAIL not set - skipping email notification"
              fi
            else
              echo "‚ÑπÔ∏è  No promotion occurred (already in production or no beta release found)"
            fi

workflows:
  version: 2

  deploy-android-app:
    jobs:
      - build-android:
          filters:
            branches:
              only:
                - app-ci-fd

  auto-promote-schedule:
    triggers:
      - schedule:
          # Run at midnight UTC every day (24 hours after the 11pm merge)
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - app-ci-fd
    jobs:
      - auto-promote-production
