version: 2.1

orbs:
  android: circleci/android@2.3.0

executors:
  android-executor:
    docker:
      - image: cimg/android:2025.10-node
    resource_class: large

commands:
  setup-android-fastlane:
    steps:
      - run:
          name: Install Ruby and Bundler
          command: |
            sudo apt-get update
            sudo apt-get install -y ruby-full
            sudo gem install bundler
      - run:
          name: Install Fastlane
          command: |
            bundle config set --local path 'vendor/bundle'
            bundle install
      - run:
          name: Decode Google Play JSON Key
          command: |
            echo $GOOGLE_PLAY_JSON_KEY | base64 -d > fastlane/google-play-api-key.json

jobs:
  build-android:
    executor: android-executor
    steps:
      - checkout

      # Verify Node.js version
      - run:
          name: Verify Node.js and npm versions
          command: |
            node --version
            npm --version

      # Restore npm cache
      - restore_cache:
          keys:
            - npm-deps-v1-{{ checksum "package-lock.json" }}
            - npm-deps-v1-

      # Install Node.js dependencies
      - run:
          name: Install Node.js Dependencies
          command: npm ci

      - save_cache:
          key: npm-deps-v1-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

      # Build Nuxt app for production
      - run:
          name: Build Nuxt App
          command: |
            export ISAPP=true
            export APP_ENV=production
            npm run generate

      # Decode and place google-services.json for Firebase
      - run:
          name: Setup Firebase Configuration
          command: |
            if [ -n "$GOOGLE_SERVICES_JSON_BASE64" ]; then
              echo "Decoding google-services.json from environment variable"
              echo "$GOOGLE_SERVICES_JSON_BASE64" | base64 -d > android/app/google-services.json

              # Validate the decoded file
              if [ -f android/app/google-services.json ]; then
                FILE_SIZE=$(wc -c < android/app/google-services.json)
                echo "✅ File created: $FILE_SIZE bytes"

                # Validate JSON syntax
                if python3 -m json.tool android/app/google-services.json > /dev/null 2>&1; then
                  echo "✅ Valid JSON structure"
                  # Show project info (not sensitive)
                  echo "📱 Project ID: $(python3 -c "import json; print(json.load(open('android/app/google-services.json'))['project_info']['project_id'])")"
                else
                  echo "❌ ERROR: Invalid JSON - Firebase will not work!"
                  exit 1
                fi
              else
                echo "❌ ERROR: File was not created!"
                exit 1
              fi
            else
              echo "⚠️  GOOGLE_SERVICES_JSON_BASE64 not set - Push notifications will not work"
              echo "   Add this environment variable in CircleCI project settings"
            fi

      # Sync Capacitor
      - run:
          name: Sync Capacitor to Android
          command: npx cap sync android

      # Make gradlew executable
      - run:
          name: Make gradlew executable
          command: chmod +x android/gradlew

      # Restore Fastlane bundle cache
      - restore_cache:
          keys:
            - bundle-v1-{{ checksum "Gemfile.lock" }}
            - bundle-v1-

      # Setup Fastlane
      - setup-android-fastlane

      - save_cache:
          key: bundle-v1-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      # Build and Deploy to Internal Track
      - run:
          name: Build and Deploy to Google Play Internal Track
          command: bundle exec fastlane android internal

      # Store build artifacts
      - store_artifacts:
          path: android/app/build/outputs/bundle/release/
          destination: android-bundle
      - store_artifacts:
          path: android/app/build/outputs/apk/release/
          destination: android-apk

      # Store debug artifacts
      - run:
          name: Create build info file
          command: |
            echo "Build #${CIRCLE_BUILD_NUM}" > build-info.txt
            echo "Branch: ${CIRCLE_BRANCH}" >> build-info.txt
            echo "Commit: ${CIRCLE_SHA1}" >> build-info.txt
            echo "" >> build-info.txt
            echo "google-services.json status:" >> build-info.txt
            ls -la android/app/google-services.json >> build-info.txt 2>&1 || echo "  File not found" >> build-info.txt
            echo "" >> build-info.txt
            echo "Build outputs:" >> build-info.txt
            ls -lh android/app/build/outputs/bundle/release/ >> build-info.txt 2>&1 || echo "  Bundle not found" >> build-info.txt
            ls -lh android/app/build/outputs/apk/release/ >> build-info.txt 2>&1 || echo "  APK not found" >> build-info.txt
          when: always
      - store_artifacts:
          path: build-info.txt
          destination: build-info.txt
      - store_artifacts:
          path: android/app/build/reports/
          destination: gradle-reports
          when: always

workflows:
  version: 2

  deploy-android-app:
    jobs:
      - build-android:
          filters:
            branches:
              only:
                - app-ci-fd
