# Android: runs in /home/circleci/project
# Apple: runs in /Users/distiller/project as user distiller
version: 2.1

orbs:
  node: circleci/node@4.1.0
  android: circleci/android@1.0.3

################
workflows:
  version: 2
  build-and-publish:
    jobs:
      - hold: # Job needs approval to run
          type: approval      
      - HoldApple: # Apple Job needs approval to run
          type: approval      
      - HoldAndroid: # Android Job needs approval to run
          type: approval      
      - build-and-publish-apple:
          filters:
            branches:
              only:
                - app-publish
          requires:
            - HoldApple
      - build-and-publish-android:
          filters:
            branches:
              only:
                - app-publish
          requires:
            - HoldAndroid

################
################ APPLE
jobs:
  build-and-publish-apple:
    macos:
      # https://circleci.com/docs/2.0/testing-ios/#supported-xcode-versions
      xcode: "14.2.0" # 11.3.1 12.4.0 13.2.1 13.0.0
    #resource_class: large
    resource_class: macos.x86.medium.gen2
    steps:
      - checkout
      - run: nvm list
      - node/install:
          lts: true # node 14.17.6 npm 6.14.15 for xcode:13.0.0 
      - run: nvm list
      - run: npm -v; node -v # 9.6.2 18.15.0
      - run: sudo chown -R 502:20 "/Users/distiller/.npm"

      ################
      - run:
          name: == Decrypt secrets and set up signing
          command: echo "Decrypt secrets"
      - run: openssl version; tar --version; java -version
      - run: cd mobile; openssl enc -aes-256-cbc -md sha512 -salt -d -in circleci-secrets.tar.enc -out circleci-secrets.tar -k $CIRCLE_TAR_PWD
      - run: cd mobile; tar -xvf circleci-secrets.tar --no-same-owner; ls -l secrets

      - run: chmod +x mobile/add-key.sh
      - run: ./mobile/add-key.sh

      ################
      - run:
          name: == Extract app version string
          command: echo "Extract app version string"
      - run: grep -o "MOBILE_VERSION:\ '[^']*'" config.js | sed -e "s/.*MOBILE_VERSION:\ '//; s/'.*//" >MOBILE_VERSION.txt
      - run: echo "export MOBILE_VERSION=$(<MOBILE_VERSION.txt)" >> $BASH_ENV
      - run: echo $MOBILE_VERSION

      - run: mkdir releases

################
      - run:
          name: == Install globals
          command: echo "Install globals"
      - run: sudo npm install -g rimraf
      - run: sudo npm install

      # SHow current branch
      - run: git rev-parse --abbrev-ref HEAD

################
# FREEGLE app
      - run:
          name: == Make Freegle app release builds and upload to iTunes
          command: echo "Make Freegle app"
      - run: cp mobile/secrets/GoogleService-Info.plist .
      - run: npm run generate
      - run: npx cap sync ios
      - run: ls -l ios/App
      - run: xcodebuild -workspace ios/App/App.xcworkspace -list
      - run: xcodebuild -workspace App.xcworkspace -scheme Freegle -destination generic/platform=iOS -archivePath App.xcarchive archive
      # /Applications/Xcode-14.2.app/Contents/Developer/usr/bin/
      - run: npx cap build ios
      #- run: ls -l android/app/build/outputs/apk/release/

################
# UPLOAD TO GITHUB AS NEW TAGGED RELEASE
      - run:
          name: == Upload created ipas as a tagged github release
          command: echo "Upload to github"
      - run: git config --local user.name "$gitusername"
      - run: git config --local user.email "$gitemail"
      - run: echo "export CIRCLECI_TAG=circleci-ios-builds-fd$MOBILE_VERSION-$(date +'%Y%m%d%H%M%S')-$(git log --format=%h -1)" >> $BASH_ENV
      - run: echo $CIRCLECI_TAG
      - run: git tag $CIRCLECI_TAG

      - run: brew install ghr

      - run: ghr -t ${GITHUB_TOKEN_NUXT3} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${CIRCLECI_TAG} ./releases/

################
# STORE RELEASE IN CIRCLE-CI ARTIFACTS
      - run:
          name: == Store built ipas as circle-ci artifacts
          command: echo "Store as circle-ci artifacts"
      - store_artifacts:
          path: ./releases

################
################ ANDROID

  build-and-publish-android:
    machine:
      image: android:2022.01.1
    #executor:
    #  #name: android/android
    #  name: android/android-machine # https://circleci.com/docs/2.0/android-machine-image/ 5/8/21:  android 23-30, gradle 6.8.3 npm 7.6.1 node v14.16.0
    ##resource_class: large
    environment:
      # JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64
      # ANDROID_HOME: /usr/local/android-sdk-linux
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3g
      _JAVA_OPTIONS: "-Xmx3g"
      TERM: dumb
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
    steps:
      - run:
          name: == Install
          command: echo "Install"
      - checkout
      - android/accept-licenses
      - run:
          name: 'Install Node 18.15.0'
          command: |
            set +x
            source ~/.bashrc

            nvm install 18.15.0
            NODE_DIR=$(dirname $(which node))
            echo "export PATH=$NODE_DIR:\$PATH" >> $BASH_ENV

      - run: npm -v; node -v # OK: 

      - run: echo $ANDROID_SDK_ROOT # /opt/android/sdk
      - run: find $ANDROID_SDK_ROOT -name "zipalign"
      - run: find $ANDROID_SDK_ROOT -name "apksigner*"

      - run: npm install
      - run: npm install -g rimraf

################
      - run:
          name: == Decrypt secrets 
          command: echo "Decrypt secrets"
      - run: sudo apt update
      - run: openssl version; tar --version; java -version
      - run: cd mobile; openssl enc -aes-256-cbc -md sha512 -salt -d -in circleci-secrets.tar.enc -out circleci-secrets.tar -k $CIRCLE_TAR_PWD
      - run: cd mobile; tar -xvf circleci-secrets.tar --no-same-owner; ls -l secrets

      - run: cp mobile/secrets/google-services.json android/app
      - run: cp mobile/secrets/android-freegle.keystore mobile
      - run: cp mobile/secrets/android-chrisphdcccom.new.keystore mobile

################
      - run: gradle -v # 6.8.3 - 7.3.3
      - run: chmod +x android/gradlew
      
################
      - run:
          name: == Extract app version strings
          command: echo "Extract app version strings"
      - run: grep -o "MOBILE_VERSION:\ '[^']*'" config.js | sed -e "s/.*MOBILE_VERSION:\ '//; s/'.*//" >MOBILE_VERSION.txt
      - run: echo "export MOBILE_VERSION=$(<MOBILE_VERSION.txt)" >> $BASH_ENV
      - run: echo $MOBILE_VERSION

      - run: mkdir releases

################
# FREEGLE APP
      - run:
          name: == Make Freegle app release build and upload to Google Play beta
          command: echo "Make Freegle app"
      - run: npm run generate
      - run: npx cap sync android
      - run: npx cap build android

      # Build release build

      - run: ls -l android/app/build/outputs/apk/release/
      - run: $ANDROID_SDK_ROOT/build-tools/32.0.0/zipalign 4 android/app/build/outputs/apk/release/app-release-unsigned.apk android/app/build/outputs/apk/release/app-release-freegle.apk
      - run: $ANDROID_SDK_ROOT/build-tools/32.0.0/apksigner sign --ks $FREEGLE_KEYSTORE --ks-pass env:FREEGLE_KEYSTORE_PASSWORD --key-pass env:FREEGLE_KEYSTORE_PASSWORD --ks-key-alias 'Freegle Ltd Chris' android/app/build/outputs/apk/release/app-release-freegle.apk
      - run: keytool -printcert -jarfile android/app/build/outputs/apk/release/app-release-freegle.apk
      - run: cp android/app/build/outputs/apk/release/app-release-freegle.apk releases

      # Publish to Google Play beta track.
      # https://haseebmajid.dev/blog/auto-publish-react-native-to-android-store-with-gitlab-ci
      # https://plugins.gradle.org/plugin/com.github.triplet.play Version 3 doesn't seem to work
      # https://github.com/Triple-T/gradle-play-publisher
      # https://plugins.gradle.org/m2/com/github/triplet/gradle/play-publisher/2.8.1/
      # gradle-play-publisher 3.7.0 needs Gradle plugin 7.x
      #                       3.5.0                     4.2.x
      #                       3.0-3.4                   4.1.x
      #                       2.8.0                     6.5
      #                       ...
      # previous build:       2.0.0-rc1                 used 5.4.1
      # "AGP_VERSION": "4.2.2", iznik-nuxt-app/platforms/android/cdv-gradle-config.json
      # https://developer.android.com/reference/tools/gradle-api
      # http://android-doc.github.io/tools/building/plugin-for-gradle.html
#NO      - run: cat android/cdv-gradle-config.json

      - run: cat android/build.gradle
      - run: sed -i "/mavenCentral/amaven { url 'https://plugins.gradle.org/m2/' }" android/build.gradle
      #- run: sed -i "/dependencies/aclasspath 'com.github.triplet.gradle:play-publisher:3.7.0'" android/build.gradle
      - run: cat android/build.gradle

      #- run: cat android/app/build.gradle
      #- run: sed -i "/dependencies/aclasspath 'com.github.triplet.gradle:play-publisher:3.7.0'" android/app/build.gradle
      #  repositories { maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
      #- run: echo "buildscript { repositories { maven { url 'https://plugins.gradle.org/m2/' } } dependencies { classpath 'com.github.triplet.gradle:play-publisher:3.7.0' } }" >>android/app/build.gradle
      #- run: echo "buildscript { dependencies { classpath 'com.github.triplet.gradle:play-publisher:3.7.0' } }" >>android/app/build.gradle
      #- run: cat android/app/build.gradle

      # https://docs.gradle.org/current/userguide/command_line_interface.html
      # https://github.com/Triple-T/gradle-play-publisher/issues/81
      - run: cp mobile/build-extras.gradle android/app
      - run: cat android/app/build-extras.gradle
      - run: cp mobile/secrets/api-freegle-google-play-deployment-2023.json android/app/api-freegle-google-play-deployment.json
      - run: cd android; gradle tasks --all
      - run: cd android; gradle publishReleaseApk --info || true # Ignore errors ie if versionCode already submitted


################
# UPLOAD TO GITHUB AS NEW TAGGED RELEASE
      - run:
          name: == Upload created apks as a tagged github release
          command: echo "Upload to github"
      - run: git config --local user.name "$gitusername"
      - run: git config --local user.email "$gitemail"
      - run: echo "export CIRCLECI_TAG=circleci-android-builds-fd$MOBILE_VERSION--$(git log --format=%h -1)" >> $BASH_ENV
      - run: echo $CIRCLECI_TAG
      - run: git tag $CIRCLECI_TAG

      # https://circleci.com/blog/publishing-to-github-releases-via-circleci/
      # https://github.com/tcnksm/ghr
      - run: wget https://github.com/tcnksm/ghr/releases/download/v0.13.0/ghr_v0.13.0_linux_386.tar.gz
      - run: tar -xvzf ghr_v0.13.0_linux_386.tar.gz
      - run: ls -l ghr_v0.13.0_linux_386
      - run: chmod +x ghr_v0.13.0_linux_386/ghr

#REDO - run: ghr_v0.13.0_linux_386/ghr -t ${GITHUB_TOKEN_NUXT3} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${CIRCLECI_TAG} ./releases/

################
# STORE RELEASE IN CIRCLE-CI ARTIFACTS
      - run:
          name: == Store built apks as circle-ci artifacts
          command: echo "Store as circle-ci artifacts"
      - store_artifacts:
          path: ./releases
