name: Auto-merge master to production

on:
  push:
    branches: [ master ]
  # Allow manual trigger for testing
  workflow_dispatch:

jobs:
  check-tests:
    runs-on: ubuntu-latest
    outputs:
      tests-passed: ${{ steps.check-status.outputs.tests-passed }}
    steps:
      - name: Check if tests passed
        id: check-status
        uses: actions/github-script@v7
        with:
          script: |
            // Get the latest commit SHA from master
            const { data: commit } = await github.rest.repos.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha
            });
            
            // Get all check runs for this commit
            const { data: checkRuns } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha
            });
            
            console.log(`Found ${checkRuns.check_runs.length} check runs for commit ${context.sha}`);
            
            // Look for CircleCI check runs (they typically have names like "ci/circleci: build-and-test")
            const circleciChecks = checkRuns.check_runs.filter(check => 
              check.name.includes('circleci') || 
              check.name.includes('build-and-test') ||
              check.app?.name === 'CircleCI'
            );
            
            console.log(`Found ${circleciChecks.length} CircleCI check runs`);
            
            if (circleciChecks.length === 0) {
              console.log('No CircleCI checks found, tests may still be running');
              core.setOutput('tests-passed', 'false');
              return;
            }
            
            // Check if all CircleCI checks passed
            const allPassed = circleciChecks.every(check => check.conclusion === 'success');
            const anyRunning = circleciChecks.some(check => check.status === 'in_progress' || check.status === 'queued');
            
            if (anyRunning) {
              console.log('Some tests are still running');
              core.setOutput('tests-passed', 'false');
            } else if (allPassed) {
              console.log('All tests passed!');
              core.setOutput('tests-passed', 'true');
            } else {
              console.log('Some tests failed');
              core.setOutput('tests-passed', 'false');
            }

  wait-for-tests:
    runs-on: ubuntu-latest
    needs: check-tests
    if: needs.check-tests.outputs.tests-passed == 'false'
    steps:
      - name: Wait for tests to complete
        uses: actions/github-script@v7
        with:
          script: |
            const maxWaitTime = 30 * 60 * 1000; // 30 minutes
            const checkInterval = 30 * 1000; // 30 seconds
            const startTime = Date.now();
            
            while (Date.now() - startTime < maxWaitTime) {
              console.log('Checking test status...');
              
              const { data: checkRuns } = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.sha
              });
              
              const circleciChecks = checkRuns.check_runs.filter(check => 
                check.name.includes('circleci') || 
                check.name.includes('build-and-test') ||
                check.app?.name === 'CircleCI'
              );
              
              if (circleciChecks.length === 0) {
                console.log('No CircleCI checks found yet, continuing to wait...');
                await new Promise(resolve => setTimeout(resolve, checkInterval));
                continue;
              }
              
              const allPassed = circleciChecks.every(check => check.conclusion === 'success');
              const anyFailed = circleciChecks.some(check => check.conclusion === 'failure');
              const anyRunning = circleciChecks.some(check => check.status === 'in_progress' || check.status === 'queued');
              
              if (allPassed) {
                console.log('All tests passed!');
                return;
              } else if (anyFailed) {
                console.log('Tests failed, will not merge to production');
                core.setFailed('Tests failed');
                return;
              } else if (anyRunning) {
                console.log('Tests still running, waiting...');
                await new Promise(resolve => setTimeout(resolve, checkInterval));
              } else {
                console.log('Tests completed with unknown status');
                core.setFailed('Tests completed with unknown status');
                return;
              }
            }
            
            console.log('Timeout waiting for tests to complete');
            core.setFailed('Timeout waiting for tests to complete');

  merge-to-production:
    runs-on: ubuntu-latest
    needs: [check-tests, wait-for-tests]
    if: always() && (needs.check-tests.outputs.tests-passed == 'true' || (needs.wait-for-tests.result == 'success'))
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Merge master to production
        run: |
          # Fetch all branches
          git fetch origin
          
          # Check out production branch
          git checkout production || git checkout -b production origin/production
          
          # Merge master into production
          git merge origin/master --no-ff -m "Auto-merge master to production after successful tests

          Merged commit: ${{ github.sha }}
          Triggered by: ${{ github.event_name }}
          
          ðŸ¤– Automated merge by GitHub Actions"
          
          # Push to production
          git push origin production

      - name: Create merge summary
        uses: actions/github-script@v7
        with:
          script: |
            const { data: commit } = await github.rest.repos.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha
            });
            
            const message = `âœ… Successfully merged master to production branch
            
            **Commit:** ${context.sha.substring(0, 7)}
            **Message:** ${commit.commit.message.split('\n')[0]}
            **Author:** ${commit.commit.author.name}
            **Tests:** All CircleCI tests passed
            
            The production branch has been updated and should trigger deployment.`;
            
            console.log(message);