default_platform(:android)

platform :android do
  desc "Build and deploy to Google Play Beta Testing"
  lane :internal do
    # Validate that Google Play API key file exists
    unless File.exist?('google-play-api-key.json')
      UI.user_error!("❌ CRITICAL: Google Play API key file not found at google-play-api-key.json")
      UI.user_error!("💡 Ensure GOOGLE_PLAY_JSON_KEY environment variable is set in CircleCI")
    end

    # Validate that the file is valid JSON
    begin
      json_key_data = JSON.parse(File.read('google-play-api-key.json'))
      if json_key_data.empty?
        UI.user_error!("❌ CRITICAL: Google Play API key file is empty")
      end
      UI.success("✅ Google Play API key file validated")
    rescue JSON::ParserError => e
      UI.user_error!("❌ CRITICAL: Google Play API key file is not valid JSON: #{e.message}")
    end

    # Get and auto-increment version NAME from CircleCI environment variable
    # This avoids needing git push permissions
    current_version = ENV['CURRENT_VERSION']

    unless current_version
      UI.user_error!("❌ CRITICAL: CURRENT_VERSION environment variable not set in CircleCI")
      UI.user_error!("💡 Set it in CircleCI Project Settings → Environment Variables")
      UI.user_error!("💡 Format: X.Y.Z (e.g., 3.2.28)")
    end

    UI.message("📱 Current version from CircleCI: #{current_version}")

    # Validate and parse version format
    parts = current_version.split('.').map(&:to_i)
    unless parts.length == 3
      UI.user_error!("❌ CRITICAL: Invalid version format '#{current_version}'. Expected format: X.Y.Z")
    end

    # Auto-increment patch version
    parts[2] += 1
    version = parts.join('.')
    UI.success("📱 Auto-incremented version name: #{current_version} → #{version}")

    # Write new version to file for CircleCI to read
    File.write('../.new_version', version)
    UI.success("✅ Wrote new version to .new_version file")

    # Get version code from Google Play API
    version_codes = nil
    latest_build = nil

    # Try beta track first (where we upload to)
    begin
      version_codes = google_play_track_version_codes(
        track: 'beta',
        json_key: 'fastlane/google-play-api-key.json'
      )

      if version_codes && version_codes.any?
        latest_build = version_codes.first
        UI.message("📊 Using Play Console beta version code: #{latest_build}")
      end
    rescue => e
      UI.message("ℹ️  Could not fetch beta track version codes: #{e.message}")
    end

    # Fall back to production track if beta is empty
    unless latest_build
      begin
        version_codes = google_play_track_version_codes(
          track: 'production',
          json_key: 'fastlane/google-play-api-key.json'
        )

        if version_codes && version_codes.any?
          latest_build = version_codes.first
          UI.message("📊 Using Play Console production version code: #{latest_build}")
        end
      rescue => e
        UI.message("ℹ️  Could not fetch production track version codes: #{e.message}")
      end
    end

    # Fail if we couldn't get version code from any track
    unless latest_build
      UI.user_error!("❌ CRITICAL: Could not fetch version codes from Google Play Console")
      UI.user_error!("💡 Ensure at least one release exists in Google Play (beta or production track)")
      UI.user_error!("💡 Check that service account has 'View app information' permission")
    end

    new_version_code = latest_build + 1
    UI.message("📊 New version code: #{new_version_code}")

    # Build the Android App Bundle (AAB) for Play Store
    gradle(
      task: 'bundle',
      build_type: 'Release',
      project_dir: 'android/',
      properties: {
        "versionName" => version,
        "versionCode" => new_version_code.to_s
      },
      flags: '--stacktrace'  # Enable stack traces for debugging
    )

    # Also build APK for direct installation and testing
    gradle(
      task: 'assemble',
      build_type: 'Release',
      project_dir: 'android/',
      properties: {
        "versionName" => version,
        "versionCode" => new_version_code.to_s
      },
      flags: '--stacktrace'  # Enable stack traces for debugging
    )
    UI.success("✅ APK built successfully for manual installation!")
    UI.message("📱 APK location: android/app/build/outputs/apk/release/app-release.apk")

    # Upload to Google Play Beta Testing track
    upload_to_play_store(
      track: 'beta',
      json_key: 'fastlane/google-play-api-key.json',
      skip_upload_apk: true,
      skip_upload_images: true,
      skip_upload_screenshots: true,
      changelog: "Version #{version} - Bug fixes and improvements"
    )
    UI.success("✅ Successfully uploaded to Google Play Beta Testing!")
  end

  desc "Promote Internal to Beta"
  lane :promote_beta do
    upload_to_play_store(
      track: 'internal',
      track_promote_to: 'beta',
      json_key: 'fastlane/google-play-api-key.json',
      skip_upload_apk: true,
      skip_upload_aab: true
    )
  end

  desc "Promote Beta to Production"
  lane :promote_production do
    upload_to_play_store(
      track: 'beta',
      track_promote_to: 'production',
      json_key: 'fastlane/google-play-api-key.json',
      skip_upload_apk: true,
      skip_upload_aab: true
    )
  end

  desc "Auto-promote beta to production after 24 hours"
  lane :auto_promote do
    require 'googleauth'
    require 'google/apis/androidpublisher_v3'
    require 'time'

    UI.message("🔍 Checking beta track for releases ready to promote...")

    json_key_data = JSON.parse(File.read('google-play-api-key.json'))
    credentials = Google::Auth::ServiceAccountCredentials.make_creds(
      json_key_io: StringIO.new(json_key_data.to_json),
      scope: 'https://www.googleapis.com/auth/androidpublisher'
    )

    service = Google::Apis::AndroidpublisherV3::AndroidPublisherService.new
    service.authorization = credentials

    # Get the edit
    edit = service.insert_edit('org.ilovefreegle.direct')
    edit_id = edit.id

    begin
      # Get beta track
      beta_track = service.get_edit_track('org.ilovefreegle.direct', edit_id, 'beta')

      if beta_track.releases && beta_track.releases.any?
        latest_release = beta_track.releases.first

        # Check if release has a user fraction (staged rollout) or is completed
        if latest_release.status == 'completed' || latest_release.status == 'inProgress'
          version_codes = latest_release.version_codes
          UI.message("📦 Found beta release with version codes: #{version_codes.join(', ')}")

          # Get production track to check if already promoted
          production_track = service.get_edit_track('org.ilovefreegle.direct', edit_id, 'production')
          production_version_codes = []
          if production_track.releases && production_track.releases.any?
            production_version_codes = production_track.releases.first.version_codes || []
          end

          # Check if beta version is already in production
          if version_codes.all? { |vc| production_version_codes.include?(vc) }
            UI.message("✅ Beta release already promoted to production")
            service.delete_edit('org.ilovefreegle.direct', edit_id)
            next
          end

          # Note: Google Play API doesn't expose exact publish timestamp
          # We'll use a simpler approach: check if there's a beta release that's not in production
          # and assume it's been there for 24 hours if this workflow runs daily

          # For now, we'll just check once per day and promote
          # A more sophisticated approach would track versions in a file/database
          hours_since_release = ENV['HOURS_SINCE_RELEASE'] || '24'

          UI.success("🚀 Promoting beta to production after #{hours_since_release} hours...")

          # Delete current edit and create new one for promotion
          service.delete_edit('org.ilovefreegle.direct', edit_id)

          # Promote to production
          promote_production

          UI.success("✅ Successfully promoted beta to production!")
        else
          UI.message("ℹ️  Beta release status: #{latest_release.status} - not ready for promotion")
        end
      else
        UI.message("ℹ️  No releases found in beta track")
      end
    rescue => e
      UI.error("❌ Error checking beta track: #{e.message}")
      service.delete_edit('org.ilovefreegle.direct', edit_id) rescue nil
      raise e
    end
  end
end
