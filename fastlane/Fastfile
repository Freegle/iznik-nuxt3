default_platform(:android)

platform :android do
  desc "Build and deploy to Google Play Internal Testing"
  lane :internal do
    # Validate that Google Play API key file exists
    unless File.exist?('fastlane/google-play-api-key.json')
      UI.user_error!("‚ùå CRITICAL: Google Play API key file not found at fastlane/google-play-api-key.json")
      UI.user_error!("üí° Ensure GOOGLE_PLAY_JSON_KEY environment variable is set in CircleCI")
    end

    # Validate that the file is valid JSON
    begin
      json_key_data = JSON.parse(File.read('fastlane/google-play-api-key.json'))
      if json_key_data.empty?
        UI.user_error!("‚ùå CRITICAL: Google Play API key file is empty")
      end
      UI.success("‚úÖ Google Play API key file validated")
    rescue JSON::ParserError => e
      UI.user_error!("‚ùå CRITICAL: Google Play API key file is not valid JSON: #{e.message}")
    end

    # Get highest version name from ALL Google Play tracks
    current_version_name = nil
    begin
      require 'googleauth'
      require 'google/apis/androidpublisher_v3'

      json_key_data = JSON.parse(File.read('fastlane/google-play-api-key.json'))
      credentials = Google::Auth::ServiceAccountCredentials.make_creds(
        json_key_io: StringIO.new(json_key_data.to_json),
        scope: 'https://www.googleapis.com/auth/androidpublisher'
      )

      service = Google::Apis::AndroidpublisherV3::AndroidPublisherService.new
      service.authorization = credentials

      # Get the edit
      edit = service.insert_edit('org.ilovefreegle.direct')
      edit_id = edit.id

      # Check all tracks: production, beta (Open Testing), alpha, internal
      tracks = ['production', 'beta', 'alpha', 'internal']
      all_version_names = []

      tracks.each do |track_name|
        begin
          track_release = service.get_edit_track('org.ilovefreegle.direct', edit_id, track_name)

          if track_release.releases && track_release.releases.any?
            latest_release = track_release.releases.first
            if latest_release.version_codes && latest_release.version_codes.any?
              version_code = latest_release.version_codes.first
              apk = service.list_edit_apks('org.ilovefreegle.direct', edit_id).apks.find { |a| a.version_code == version_code }
              if apk && apk.version_name
                all_version_names << apk.version_name
                UI.message("üìä Found version #{apk.version_name} in #{track_name} track")
              end
            end
          end
        rescue => track_error
          UI.message("‚ÑπÔ∏è  No releases in #{track_name} track")
        end
      end

      # Find the highest version across all tracks
      if all_version_names.any?
        current_version_name = all_version_names.max_by { |v| v.split('.').map(&:to_i) }
        UI.success("üéØ Highest version across all tracks: #{current_version_name}")
      end

      # Clean up the edit
      service.delete_edit('org.ilovefreegle.direct', edit_id)
    rescue => e
      UI.user_error!("‚ùå CRITICAL: Failed to fetch version names from Play Console: #{e.message}")
      UI.user_error!("üí° Check that GOOGLE_PLAY_JSON_KEY is valid and service account has proper permissions")
    end

    # Auto-increment version name
    unless current_version_name
      UI.user_error!("‚ùå CRITICAL: No version found in Google Play Console")
      UI.user_error!("üí° Ensure at least one release exists in Google Play (production, beta, alpha, or internal track)")
    end

    # Parse version (e.g., "3.2.27" -> [3, 2, 27])
    parts = current_version_name.split('.').map(&:to_i)

    if parts.length == 3
      # Increment patch version
      parts[2] += 1
      version = parts.join('.')
      UI.success("üì± Auto-incremented version name: #{current_version_name} ‚Üí #{version}")
    else
      UI.user_error!("‚ùå CRITICAL: Unexpected version format '#{current_version_name}'. Expected format: X.Y.Z")
    end

    # Get version code from Google Play API
    version_codes = nil
    latest_build = nil

    # Try internal track first (where we upload to)
    begin
      version_codes = google_play_track_version_codes(
        track: 'internal',
        json_key: 'fastlane/google-play-api-key.json'
      )

      if version_codes && version_codes.any?
        latest_build = version_codes.first
        UI.message("üìä Using Play Console internal version code: #{latest_build}")
      end
    rescue => e
      UI.message("‚ÑπÔ∏è  Could not fetch internal track version codes: #{e.message}")
    end

    # Fall back to production track if internal is empty
    unless latest_build
      begin
        version_codes = google_play_track_version_codes(
          track: 'production',
          json_key: 'fastlane/google-play-api-key.json'
        )

        if version_codes && version_codes.any?
          latest_build = version_codes.first
          UI.message("üìä Using Play Console production version code: #{latest_build}")
        end
      rescue => e
        UI.message("‚ÑπÔ∏è  Could not fetch production track version codes: #{e.message}")
      end
    end

    # Fail if we couldn't get version code from any track
    unless latest_build
      UI.user_error!("‚ùå CRITICAL: Could not fetch version codes from Google Play Console")
      UI.user_error!("üí° Ensure at least one release exists in Google Play (internal or production track)")
      UI.user_error!("üí° Check that service account has 'View app information' permission")
    end

    new_version_code = latest_build + 1
    UI.message("üìä New version code: #{new_version_code}")

    # Build the Android App Bundle (AAB) for Play Store
    gradle(
      task: 'bundle',
      build_type: 'Release',
      project_dir: 'android/',
      properties: {
        "versionName" => version,
        "versionCode" => new_version_code.to_s
      },
      flags: '--stacktrace'  # Enable stack traces for debugging
    )

    # Also build APK for direct installation and testing
    gradle(
      task: 'assemble',
      build_type: 'Release',
      project_dir: 'android/',
      properties: {
        "versionName" => version,
        "versionCode" => new_version_code.to_s
      },
      flags: '--stacktrace'  # Enable stack traces for debugging
    )
    UI.success("‚úÖ APK built successfully for manual installation!")
    UI.message("üì± APK location: android/app/build/outputs/apk/release/app-release.apk")

    # Upload to Google Play Internal Testing track
    upload_to_play_store(
      track: 'internal',
      json_key: 'fastlane/google-play-api-key.json',
      skip_upload_apk: true,
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )
    UI.success("‚úÖ Successfully uploaded to Google Play Internal Testing!")
  end

  desc "Promote Internal to Beta"
  lane :promote_beta do
    upload_to_play_store(
      track: 'internal',
      track_promote_to: 'beta',
      json_key: 'fastlane/google-play-api-key.json',
      skip_upload_apk: true,
      skip_upload_aab: true
    )
  end

  desc "Promote Beta to Production"
  lane :promote_production do
    upload_to_play_store(
      track: 'beta',
      track_promote_to: 'production',
      json_key: 'fastlane/google-play-api-key.json',
      skip_upload_apk: true,
      skip_upload_aab: true
    )
  end
end
