default_platform(:android)

VERSION_FILE = "../VERSION.txt"

platform :android do
  desc "Build and deploy to Google Play Internal Testing"
  lane :internal do
    version = File.read(VERSION_FILE).strip

    # Get version code - try Google Play API first, fallback to incremental
    begin
      version_codes = google_play_track_version_codes(
        track: 'internal',
        json_key: 'fastlane/google-play-api-key.json'
      )

      if version_codes && version_codes.any?
        latest_build = version_codes.first
        new_version_code = latest_build + 1
        UI.message("üìä Using Play Console version code: #{new_version_code}")
      else
        # No releases on internal track yet - start from default
        new_version_code = 1297  # Current production version + 1
        UI.important("‚ö†Ô∏è  No releases found on internal track")
        UI.important("üìÖ Starting from version code: #{new_version_code}")
      end
    rescue => e
      # Fallback: start from current production version
      new_version_code = 1297
      UI.important("‚ö†Ô∏è  Google Play API error: #{e.message}")
      UI.important("üìÖ Using fallback version code: #{new_version_code}")
      UI.important("üí° Next build will auto-increment once uploaded to Play Store")
    end

    # Build the Android App Bundle (AAB)
    gradle(
      task: 'bundle',
      build_type: 'Release',
      project_dir: 'android/',
      properties: {
        "versionName" => version,
        "versionCode" => new_version_code.to_s
      }
    )

    # Upload to Google Play Internal Testing track (if credentials are available)
    begin
      upload_to_play_store(
        track: 'internal',
        json_key: 'fastlane/google-play-api-key.json',
        skip_upload_apk: true,
        skip_upload_metadata: true,
        skip_upload_images: true,
        skip_upload_screenshots: true
      )
      UI.success("‚úÖ Successfully uploaded to Google Play Internal Testing!")
    rescue => e
      UI.important("‚ö†Ô∏è  Google Play upload failed: #{e.message}")
      UI.important("üì¶ AAB file is available in android/app/build/outputs/bundle/release/")
      UI.important("üí° To enable Play Store upload, configure GOOGLE_PLAY_JSON_KEY in CircleCI")
      # Don't fail the build - the AAB is still created and stored as artifact
    end
  end

  desc "Promote Internal to Beta"
  lane :promote_beta do
    upload_to_play_store(
      track: 'internal',
      track_promote_to: 'beta',
      json_key: 'fastlane/google-play-api-key.json',
      skip_upload_apk: true,
      skip_upload_aab: true
    )
  end

  desc "Promote Beta to Production"
  lane :promote_production do
    upload_to_play_store(
      track: 'beta',
      track_promote_to: 'production',
      json_key: 'fastlane/google-play-api-key.json',
      skip_upload_apk: true,
      skip_upload_aab: true
    )
  end
end
