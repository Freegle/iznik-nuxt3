default_platform(:android)

VERSION_FILE = "../VERSION.txt"

platform :android do
  desc "Build and deploy to Google Play Internal Testing"
  lane :internal do
    version = File.read(VERSION_FILE).strip

    # Get version code - try Google Play API first, fallback to incremental
    begin
      # Try to get version codes from production track first (most reliable)
      version_codes = google_play_track_version_codes(
        track: 'production',
        json_key: 'fastlane/google-play-api-key.json'
      )

      if version_codes && version_codes.any?
        latest_build = version_codes.first
        new_version_code = latest_build + 1
        UI.message("📊 Using Play Console production version code: #{latest_build}")
        UI.message("📊 New version code: #{new_version_code}")
      else
        # Try internal track if production is empty
        version_codes = google_play_track_version_codes(
          track: 'internal',
          json_key: 'fastlane/google-play-api-key.json'
        )

        if version_codes && version_codes.any?
          latest_build = version_codes.first
          new_version_code = latest_build + 1
          UI.message("📊 Using Play Console internal version code: #{latest_build}")
          UI.message("📊 New version code: #{new_version_code}")
        else
          # No releases on any track - use default
          new_version_code = 1297
          UI.important("⚠️  No releases found on any track")
          UI.important("📅 Using default version code: #{new_version_code}")
        end
      end
    rescue => e
      # Fallback: start from current production version
      new_version_code = 1297
      UI.important("⚠️  Google Play API error: #{e.message}")
      UI.important("📅 Using fallback version code: #{new_version_code}")
      UI.important("💡 Check service account permissions in Play Console")
    end

    # Build the Android App Bundle (AAB)
    gradle(
      task: 'bundle',
      build_type: 'Release',
      project_dir: 'android/',
      properties: {
        "versionName" => version,
        "versionCode" => new_version_code.to_s
      }
    )

    # Upload to Google Play Internal Testing track (if credentials are available)
    begin
      upload_to_play_store(
        track: 'internal',
        json_key: 'fastlane/google-play-api-key.json',
        skip_upload_apk: true,
        skip_upload_metadata: true,
        skip_upload_images: true,
        skip_upload_screenshots: true
      )
      UI.success("✅ Successfully uploaded to Google Play Internal Testing!")
    rescue => e
      error_msg = e.message

      # Check if this is a Play App Signing enrollment error
      if error_msg.include?("Play Signing") || error_msg.include?("Play signing")
        UI.error("❌ Google Play upload failed: #{error_msg}")
        UI.error("📋 Action Required: Enroll in Google Play App Signing")
        UI.error("🔗 Instructions: https://support.google.com/googleplay/android-developer/answer/9842756")
        UI.error("")
        UI.error("Steps:")
        UI.error("1. Go to Play Console → your app → Release → Setup → App integrity")
        UI.error("2. Under 'App signing', click 'Use Google-generated key'")
        UI.error("3. Follow the prompts to complete enrollment")
        UI.error("")
        UI.error("📦 AAB file is available in CircleCI artifacts if needed for manual upload")
        UI.user_error!("Build failed: Play App Signing enrollment required")
      else
        # For other errors, warn but don't fail (e.g., missing credentials)
        UI.important("⚠️  Google Play upload failed: #{error_msg}")
        UI.important("📦 AAB file is available in android/app/build/outputs/bundle/release/")
        UI.important("💡 To enable Play Store upload, configure GOOGLE_PLAY_JSON_KEY in CircleCI")
        # Don't fail the build - the AAB is still created and stored as artifact
      end
    end
  end

  desc "Promote Internal to Beta"
  lane :promote_beta do
    upload_to_play_store(
      track: 'internal',
      track_promote_to: 'beta',
      json_key: 'fastlane/google-play-api-key.json',
      skip_upload_apk: true,
      skip_upload_aab: true
    )
  end

  desc "Promote Beta to Production"
  lane :promote_production do
    upload_to_play_store(
      track: 'beta',
      track_promote_to: 'production',
      json_key: 'fastlane/google-play-api-key.json',
      skip_upload_apk: true,
      skip_upload_aab: true
    )
  end
end
