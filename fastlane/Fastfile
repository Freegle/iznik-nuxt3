default_platform(:android)

platform :android do
  desc "Build and deploy to Google Play Internal Testing"
  lane :internal do
    # Validate that Google Play API key file exists
    unless File.exist?('google-play-api-key.json')
      UI.user_error!("❌ CRITICAL: Google Play API key file not found at google-play-api-key.json")
      UI.user_error!("💡 Ensure GOOGLE_PLAY_JSON_KEY environment variable is set in CircleCI")
    end

    # Validate that the file is valid JSON
    begin
      json_key_data = JSON.parse(File.read('google-play-api-key.json'))
      if json_key_data.empty?
        UI.user_error!("❌ CRITICAL: Google Play API key file is empty")
      end
      UI.success("✅ Google Play API key file validated")
    rescue JSON::ParserError => e
      UI.user_error!("❌ CRITICAL: Google Play API key file is not valid JSON: #{e.message}")
    end

    # Get and auto-increment version NAME from VERSION.txt
    # Version names in Play Console are not reliably accessible via API
    unless File.exist?('../VERSION.txt')
      UI.user_error!("❌ CRITICAL: VERSION.txt not found")
      UI.user_error!("💡 Create VERSION.txt in repository root with version (e.g., 3.2.28)")
    end

    current_version = File.read('../VERSION.txt').strip
    UI.message("📱 Current version from VERSION.txt: #{current_version}")

    # Validate and parse version format
    parts = current_version.split('.').map(&:to_i)
    unless parts.length == 3
      UI.user_error!("❌ CRITICAL: Invalid version format '#{current_version}' in VERSION.txt. Expected format: X.Y.Z")
    end

    # Auto-increment patch version
    parts[2] += 1
    version = parts.join('.')
    UI.success("📱 Auto-incremented version name: #{current_version} → #{version}")

    # Update VERSION.txt with new version
    File.write('../VERSION.txt', version)
    UI.success("✅ Updated VERSION.txt to #{version}")

    # Get version code from Google Play API
    version_codes = nil
    latest_build = nil

    # Try internal track first (where we upload to)
    begin
      version_codes = google_play_track_version_codes(
        track: 'internal',
        json_key: 'google-play-api-key.json'
      )

      if version_codes && version_codes.any?
        latest_build = version_codes.first
        UI.message("📊 Using Play Console internal version code: #{latest_build}")
      end
    rescue => e
      UI.message("ℹ️  Could not fetch internal track version codes: #{e.message}")
    end

    # Fall back to production track if internal is empty
    unless latest_build
      begin
        version_codes = google_play_track_version_codes(
          track: 'production',
          json_key: 'google-play-api-key.json'
        )

        if version_codes && version_codes.any?
          latest_build = version_codes.first
          UI.message("📊 Using Play Console production version code: #{latest_build}")
        end
      rescue => e
        UI.message("ℹ️  Could not fetch production track version codes: #{e.message}")
      end
    end

    # Fail if we couldn't get version code from any track
    unless latest_build
      UI.user_error!("❌ CRITICAL: Could not fetch version codes from Google Play Console")
      UI.user_error!("💡 Ensure at least one release exists in Google Play (internal or production track)")
      UI.user_error!("💡 Check that service account has 'View app information' permission")
    end

    new_version_code = latest_build + 1
    UI.message("📊 New version code: #{new_version_code}")

    # Build the Android App Bundle (AAB) for Play Store
    gradle(
      task: 'bundle',
      build_type: 'Release',
      project_dir: 'android/',
      properties: {
        "versionName" => version,
        "versionCode" => new_version_code.to_s
      },
      flags: '--stacktrace'  # Enable stack traces for debugging
    )

    # Also build APK for direct installation and testing
    gradle(
      task: 'assemble',
      build_type: 'Release',
      project_dir: 'android/',
      properties: {
        "versionName" => version,
        "versionCode" => new_version_code.to_s
      },
      flags: '--stacktrace'  # Enable stack traces for debugging
    )
    UI.success("✅ APK built successfully for manual installation!")
    UI.message("📱 APK location: android/app/build/outputs/apk/release/app-release.apk")

    # Upload to Google Play Internal Testing track
    upload_to_play_store(
      track: 'internal',
      json_key: 'google-play-api-key.json',
      skip_upload_apk: true,
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )
    UI.success("✅ Successfully uploaded to Google Play Internal Testing!")
  end

  desc "Promote Internal to Beta"
  lane :promote_beta do
    upload_to_play_store(
      track: 'internal',
      track_promote_to: 'beta',
      json_key: 'google-play-api-key.json',
      skip_upload_apk: true,
      skip_upload_aab: true
    )
  end

  desc "Promote Beta to Production"
  lane :promote_production do
    upload_to_play_store(
      track: 'beta',
      track_promote_to: 'production',
      json_key: 'google-play-api-key.json',
      skip_upload_apk: true,
      skip_upload_aab: true
    )
  end
end
